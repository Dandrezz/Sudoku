{"version":3,"sources":["App.js","components/MatrixScreen.js","router/AppRouter.js","index.js"],"names":["App","matrixIncial","useState","matrixA","setMatrixRes","resolverMatrix","matrixB","matrixC","matrix","i","Array","fill","j","k","Math","floor","tmp","includes","push","length","llenarMatrix","className","map","row","indexRow","col","indexCol","parseInt","onClick","MatrixScreen","diff","sudokuSinTerminar","forEach","element","Swal","fire","icon","title","text","value","name","onChange","e","x","y","target","valor","match","handleInputChange","AppRouter","exact","path","component","to","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.403858ed.chunk.js","sourcesContent":["import { useState } from \"react\";\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n\r\n  const matrixIncial = [\r\n    [0, 0, 3, 0, 4, 0, 0, 6, 7],\r\n    [0, 0, 4, 0, 0, 8, 2, 0, 0],\r\n    [0, 9, 6, 0, 0, 0, 3, 8, 0],\r\n    [5, 0, 7, 8, 0, 0, 9, 0, 2],\r\n    [0, 0, 9, 0, 0, 5, 4, 3, 0],\r\n    [3, 0, 0, 0, 0, 0, 6, 0, 0],\r\n    [0, 0, 0, 0, 0, 4, 0, 0, 0],\r\n    [4, 3, 2, 0, 7, 0, 0, 0, 0],\r\n    [0, 8, 0, 0, 2, 0, 5, 4, 0], \r\n  ]\r\n\r\n  const [matrixA, setMatrixRes] = useState(matrixIncial);\r\n  \r\n  const llenarMatrix = () => {\r\n    let matrixB = [], matrixC = [];\r\n    let matrix = [...matrixA];\r\n    for (let i = 0; i < 9; i++) {\r\n      matrixB[i] = new Array(9).fill(0);\r\n      matrixC[i] = new Array(9).fill(0);\r\n    }\r\n    for (let i = 0; i < 9; i++) {\r\n      for (let j = 0; j < 9; j++) {\r\n        matrixB[i][j] = (matrix[j][i]);\r\n      }\r\n    }\r\n    for (let i = 0; i < 9; i++) {\r\n      for (let j = 0; j < 3; j++) {\r\n        for (let k = 0; k < 3; k++) {\r\n          matrixC[i][j * 3 + k] = (matrix[Math.floor(i / 3) * 3 + j][(i % 3) * 3 + k]);\r\n        }\r\n      }\r\n    }\r\n    let tmp = [];\r\n    for (let i = 0; i < 9; i++) {\r\n      for (let j = 0; j < 9; j++) {\r\n        if(matrix[i][j]===0){\r\n          for (let k = 1; k < 10; k++) {\r\n            if( !matrix[i].includes(k) && !matrixB[j].includes(k) && !matrixC[Math.floor(i/3)*3+Math.floor(j/3)].includes(k) ){\r\n              tmp.push(k)\r\n            }\r\n          }\r\n          if(tmp.length===1){\r\n            matrix[i][j]=tmp[0];\r\n            matrixB[j][i]=tmp[0];\r\n            matrixC[Math.floor(i/3)*3+Math.floor(j/3)][(i%3)*3+j%3]=tmp[0];\r\n          }\r\n          tmp = [];\r\n        }        \r\n      }      \r\n    }\r\n    setMatrixRes([...matrix]);\r\n  }\r\n\r\n  const resolverMatrix = () => {\r\n    llenarMatrix()\r\n  }\r\n\r\n  const limpiarSudoku = () => {\r\n    setMatrixRes(matrixIncial);\r\n  }\r\n\r\n  return (\r\n    <div className=\"App top-3\">\r\n      <h1 className=\"center\">Sudoku</h1>\r\n      <table \r\n        className=\"matrix-table top-3\"\r\n      >\r\n        <tbody>\r\n          {matrixA.map((row, indexRow) => (\r\n            <tr key={indexRow}>\r\n              {row.map((col, indexCol) => (\r\n                <th\r\n                  className={`${\r\n                    parseInt((parseInt(indexRow / 3) * 3 + indexCol) / 3) %\r\n                      2 ===\r\n                    1\r\n                      ? `light`\r\n                      : `dark`\r\n                  }`}\r\n                  key={indexCol}\r\n                >\r\n                  {col !== 0 ? col : \"\"}\r\n                </th>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n      <button\r\n        className=\"centrar-btn top-3\"\r\n        onClick={()=>(resolverMatrix())}\r\n      >Llenar Sudoku</button>\r\n      <button\r\n        className=\"centrar-btn top-3\"\r\n        onClick={()=>(limpiarSudoku())}\r\n      >Limpiar Sudoku</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { useState } from \"react\";\r\nimport \"./MatrixScreen.css\";\r\nimport Swal from 'sweetalert2'\r\n\r\nfunction MatrixScreen() {\r\n\r\n    const matrixIncial = [\r\n        [0, 0, 3, 0, 4, 0, 0, 6, 7],\r\n        [0, 0, 4, 0, 0, 8, 2, 0, 0],\r\n        [0, 9, 6, 0, 0, 0, 3, 8, 0],\r\n        [5, 0, 7, 8, 0, 0, 9, 0, 2],\r\n        [0, 0, 9, 0, 0, 5, 4, 3, 0],\r\n        [3, 0, 0, 0, 0, 0, 6, 0, 0],\r\n        [0, 0, 0, 0, 0, 4, 0, 0, 0],\r\n        [4, 3, 2, 0, 7, 0, 0, 0, 0],\r\n        [0, 8, 0, 0, 2, 0, 5, 4, 0],\r\n    ]\r\n\r\n    const [matrixA, setMatrixRes] = useState(matrixIncial);\r\n\r\n    const llenarMatrix = () => {\r\n        let matrixB = [], matrixC = [];\r\n        let matrix = [...matrixA];\r\n        let diff = false;\r\n        for (let i = 0; i < 9; i++) {\r\n            matrixB[i] = new Array(9).fill(0);\r\n            matrixC[i] = new Array(9).fill(0);\r\n        }\r\n        for (let i = 0; i < 9; i++) {\r\n            for (let j = 0; j < 9; j++) {\r\n                matrixB[i][j] = (matrix[j][i]);\r\n            }\r\n        }\r\n        for (let i = 0; i < 9; i++) {\r\n            for (let j = 0; j < 3; j++) {\r\n                for (let k = 0; k < 3; k++) {\r\n                    matrixC[i][j * 3 + k] = (matrix[Math.floor(i / 3) * 3 + j][(i % 3) * 3 + k]);\r\n                }\r\n            }\r\n        }\r\n        let tmp = [];\r\n        for (let i = 0; i < 9; i++) {\r\n            for (let j = 0; j < 9; j++) {\r\n                if (matrix[i][j] === 0) {\r\n                    for (let k = 1; k < 10; k++) {\r\n                        if (!matrix[i].includes(k) && !matrixB[j].includes(k) && !matrixC[Math.floor(i / 3) * 3 + Math.floor(j / 3)].includes(k)) {\r\n                            tmp.push(k)\r\n                        }\r\n                    }\r\n                    if (tmp.length === 1) {\r\n                        matrix[i][j] = tmp[0];\r\n                        matrixB[j][i] = tmp[0];\r\n                        matrixC[Math.floor(i / 3) * 3 + Math.floor(j / 3)][(i % 3) * 3 + j % 3] = tmp[0];\r\n                        diff = true;\r\n                    }\r\n                    tmp = [];\r\n                }\r\n            }\r\n        }\r\n        if (!diff) {\r\n            let sudokuSinTerminar = false;\r\n            matrixA.forEach(element => {\r\n                if (element.includes(0)) {\r\n                    sudokuSinTerminar = true;\r\n                }\r\n            });\r\n            if (sudokuSinTerminar) {\r\n                Swal.fire({\r\n                    icon: 'error',\r\n                    title: 'Oops...',\r\n                    text: 'Sudoku no se puede resolver!',\r\n                })\r\n            } else {\r\n                Swal.fire(\r\n                    'Good job!',\r\n                    'Sudoku completo!',\r\n                    'success'\r\n                )\r\n            }\r\n        }\r\n        setMatrixRes([...matrix]);\r\n    }\r\n\r\n    const resolverMatrix = () => {\r\n        llenarMatrix()\r\n    }\r\n\r\n    const limpiarSudoku = () => {\r\n        setMatrixRes(matrixIncial);\r\n    }\r\n\r\n    const handleInputChange = ({ target }, x, y) => {\r\n        const re = /^[0-9]$/;\r\n        const valor = target.value;\r\n        if (valor.match(re) || valor === \"\") {\r\n            let matrix = [...matrixA];\r\n\r\n            matrixA[x][y] = target.value === \"\" ? 0 : parseInt(target.value);\r\n            setMatrixRes([...matrix])\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"App top-3\">\r\n            <h1 className=\"center\">Sudoku</h1>\r\n            <table\r\n                className=\"matrix-table2 top-3\"\r\n            >\r\n                <tbody>\r\n                    {matrixA.map((row, indexRow) => (\r\n                        <tr key={indexRow}>\r\n                            {row.map((col, indexCol) => (\r\n                                <th\r\n                                    className={`${parseInt((parseInt(indexRow / 3) * 3 + indexCol) / 3) %\r\n                                        2 ===\r\n                                        1\r\n                                        ? `light`\r\n                                        : `dark`\r\n                                        }`}\r\n                                    key={indexCol}\r\n                                >\r\n                                    <input\r\n                                        value={col !== 0 ? col : \"\"}\r\n                                        name={`${indexRow}${indexCol}`}\r\n                                        onChange={(e) => { handleInputChange(e, indexRow, indexCol) }}\r\n                                    />\r\n                                </th>\r\n                            ))}\r\n                        </tr>\r\n                    ))}\r\n                </tbody>\r\n            </table>\r\n            <button\r\n                className=\"centrar-btn top-3\"\r\n                onClick={() => (resolverMatrix())}\r\n            >Llenar Sudoku</button>\r\n            <button\r\n                className=\"centrar-btn top-3\"\r\n                onClick={() => (limpiarSudoku())}\r\n            >Limpiar Sudoku</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MatrixScreen;","import React from 'react';\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Redirect,\r\n    Route\r\n  } from 'react-router-dom';\r\n  import App from '../App';\r\n  import MatrixScreen from '../components/MatrixScreen'\r\n\r\nconst AppRouter = () => {\r\n    return (\r\n        <Router>\r\n            <div>\r\n                <Switch>\r\n                    <Route \r\n                        exact \r\n                        path=\"/\" \r\n                        component={ App }\r\n                    />\r\n                    <Route \r\n                        exact \r\n                        path=\"/input\" \r\n                        component={ MatrixScreen }\r\n                    />\r\n                    <Redirect to=\"/\" />   \r\n                </Switch>\r\n            </div>\r\n        </Router>\r\n    )\r\n}\r\n\r\nexport default AppRouter;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport AppRouter from './router/AppRouter';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <AppRouter />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}